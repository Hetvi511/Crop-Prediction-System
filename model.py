# -*- coding: utf-8 -*-
"""Hetvi_ML_Miniproject(1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BpJq2wJaToJyqR8E9vI_ba3U54B2uUNp
"""

#importing libraries
import numpy as np
import pandas as pd
import math
import matplotlib.pyplot as plt
import seaborn as sns
import pickle

df=pd.read_csv('C:\ML Model Deployment\Crop_recommendation.csv')
print(df)

"""# **EDA**"""

df.info()

df.isnull().sum()

df['label'].unique()

df['label'].value_counts()

df.describe()

#Statistical measure of variability
df_numeric=df.drop('label', axis = 1)
df_numeric.corr()

plt.figure(figsize=(16,12))
plt.subplot(3,2,1)
sns.histplot(df['N'])

plt.subplot(3,2,2)
sns.histplot(df['P'])

plt.subplot(3,2,3)
sns.histplot(df['K'])

plt.subplot(3,2,4)
sns.histplot(df['temperature'])

plt.subplot(3,2,5)
sns.histplot(df['ph'])

plt.subplot(3,2,6)
sns.histplot(df['humidity'])

plt.show()

import seaborn as sns
# Plot for column N vs. Crop Type
plt.figure(figsize=(19, 7))
sns.barplot(x='label', y='N', hue='label', data=df, palette="viridis", dodge=False)
plt.xticks(rotation=90)
plt.title("N vs Crop Type")
plt.xlabel("")
plt.show()

# Plot for column P vs. Crop Type
plt.figure(figsize=(19, 7))
sns.barplot(x='label', y='P', hue='label', data=df, palette="viridis", dodge=False)
plt.xticks(rotation=90)
plt.title("P vs Crop Type")
plt.xlabel("")
plt.show()

# Plot for column K vs. Crop Type
plt.figure(figsize=(19, 7))
sns.barplot(x='label', y='K', hue='label', data=df, palette="viridis", dodge=False)
plt.xticks(rotation=90)
plt.title("K vs Crop Type")
plt.xlabel("")
plt.show()

# Plot for column temperature vs. Crop Type
plt.figure(figsize=(19, 7))
sns.barplot(x='label', y='temperature', hue='label', data=df, palette="viridis", dodge=False)
plt.xticks(rotation=90)
plt.title("temperature vs Crop Type")
plt.xlabel("")
plt.show()

# Plot for column humidity vs. Crop Type
plt.figure(figsize=(19, 7))
sns.barplot(x='label', y='humidity', hue='label', data=df, palette="viridis", dodge=False)
plt.xticks(rotation=90)
plt.title("humidity vs Crop Type")
plt.xlabel("")
plt.show()

# Plot for column pH vs. Crop Type
plt.figure(figsize=(19, 7))
sns.barplot(x='label', y='ph', hue='label', data=df, palette="viridis", dodge=False)
plt.xticks(rotation=90)
plt.title("ph vs Crop Type")
plt.xlabel("")
plt.show()

# Plot for column rainfall vs. Crop Type
plt.figure(figsize=(19, 7))
sns.barplot(x='label', y='rainfall', hue='label', data=df, palette="viridis", dodge=False)
plt.xticks(rotation=90)
plt.title("rainfall vs Crop Type")
plt.xlabel("")
plt.show()

"""We can observe that,



1.   Most of the crops are grown in humid climate and the average temperature is 25 degrees.
2.   Grapes and apple require high Potassium content in the soil while the  requirement of other crops is low.
3.   The amount of phosphorous required by all the crops is high.

# **Model Selection**
"""

from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

data=['N','P','K','temperature','humidity','ph','rainfall']
X=df[data]
y=df.label

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

models = {
    'Decision Tree': DecisionTreeClassifier(),
    'Random Forest': RandomForestClassifier(),
    'SVM': SVC()
}

results = {}
for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    results[name] = accuracy

best_model = max(results, key=results.get)
best_accuracy = results[best_model]

print("Results:")
for name, accuracy in results.items():
    print(f"{name}: Accuracy = {accuracy}")

print(f"\nBest Model: {best_model}, Accuracy = {best_accuracy}")

"""# **Random Forest**"""

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.model_selection import cross_val_score

data=['N','P','K','temperature','humidity','ph','rainfall']
x=df[data]
y=df.label

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

rf_classifier=RandomForestClassifier(n_estimators=5)
rf_classifier.fit(x_train,y_train)
rf_prediction=rf_classifier.predict(x_test)

from sklearn import metrics
rf_accuracy = accuracy_score(y_test, rf_prediction)
print("Accuracy:",metrics.accuracy_score(y_test, rf_prediction))

#using cross validation
cv_scores = cross_val_score(rf_classifier, x, y, cv=5)
print("Cross-Validation Scores:", cv_scores)
print("Mean CV Score:", cv_scores.mean())

pickle.dump(rf_classifier,open("crop.pkl","wb"))